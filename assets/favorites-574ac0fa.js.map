{"version":3,"file":"favorites-574ac0fa.js","sources":["../../src/js/favorites.js"],"sourcesContent":["import axios from 'axios';\r\nimport { hide, show } from \"./services/visibility\";\r\nimport { refs } from './templates/refs.js';\r\n// import { onClickCardContent } from './modal-menu.js';\r\n\r\n\r\n//  Quote of the Day if quote is not part of Favorites page\r\nconst LS_KEY_QUOTE = 'quoteResponse';\r\nconst quoteFromLS = JSON.parse(localStorage.getItem(LS_KEY_QUOTE));\r\nconsole.log(quoteFromLS);\r\n\r\nfunction displayQuoteOnPage(quoteData) {\r\n  const quoteText = document.querySelector('.quote-text');\r\n  const quoteAuthor = document.querySelector('.quote-author');\r\n  quoteText.textContent = quoteData.quote;\r\n  quoteAuthor.textContent = quoteData.author;\r\n}\r\n\r\n// Favorites gallery\r\n\r\nconst BASE_URL_FAVORITES = 'https://energyflow.b.goit.study/api/exersises/';\r\n\r\nasync function searchExerciseByID({ id}) {\r\n  const response = await axios.get(\r\n    `${BASE_URL_FAVORITES}`,\r\n    {\r\n      params: {\r\n        _id: id,\r\n      },\r\n    }\r\n  );\r\n  return response.data;\r\n}\r\n\r\n/// Create the Favorites page\r\n\r\nconst LS_KEY_FAVORITES = 'favorites';\r\n\r\n\r\nasync function createGalleryFromLS(event) {\r\n  event.preventDefault();\r\n  \r\n  refs.favoritesGallery.innerHTML = '';\r\n  refs.favoritesMessage.style.display = 'none';\r\n  \r\n  try {\r\n    const itemsFromLS = await JSON.parse(localStorage.getItem(LS_KEY_FAVORITES));\r\n    if (\r\n      !itemsFromLS ||\r\n      !Array.isArray(itemsFromLS) ||\r\n      itemsFromLS.length === 0\r\n    ) {\r\n      console.log('No items found in local storage or data is invalid.');\r\n      refs.favoritesMessage.style.display = 'block';\r\n    }\r\n\r\n    refs.favoritesGallery.insertAdjacentHTML(\"afterbegin\", createMarkupFavorites(itemsFromLS));\r\n    \r\n    if (itemsFromLS > 9) {\r\n      scrollBy(); \r\n    }\r\n    refs.onRemoveBtn.forEach.addEventListener('click', removeObjectFromLocalStorage);      \r\n    refs.onStartBtn.forEach.addEventListener('click', handleStartButtonClick);\r\n\r\n    } catch (error) {\r\n      console.error('Error creating gallery from local storage:', error);\r\n    } finally {\r\n      console.log();\r\n      await refreshGallery();\r\n    }\r\n  }\r\n\r\n\r\n    // Refresh the gallery by updating the displayed items\r\n  async function refreshGallery() {\r\n    refs.favoritesMessage.style.display = 'none';\r\n    \r\n      try {\r\n        const itemsFromLS = await JSON.parse(localStorage.getItem(LS_KEY_FAVORITES));\r\n        \r\n        if (!Array.isArray(itemsFromLS) || itemsFromLS.length === 0) {\r\n          console.log('Array in local storage is empty or does not exist.');\r\n          refs.favoritesMessage.style.display = 'block';\r\n      }\r\n       \r\n      refs.favoritesGallery.innerHTML = '';\r\n\r\n      itemsFromLS.forEach(itemsFromLS => {\r\n        refs.favoritesGallery.insertAdjacentHTML('afterbegin', createMarkupFavorites(itemsFromLS));\r\n        \r\n        refs.onRemoveBtn.forEach.addEventListener('click', removeObjectFromLocalStorage);      \r\n        refs.onStartBtn.forEach.addEventListener('click', handleStartButtonClick);\r\n      });\r\n\r\n      console.log('Gallery refreshed successfully.');\r\n    } catch (error) {\r\n      console.error('Error refreshing gallery:', error);\r\n    }\r\n  }\r\n\r\n    // Scroll for container favorites-gallery for desktop and tablet\r\n    function scrollBy() {\r\n      refs.favoritesGallery.scrollTo({\r\n        top: refs.favoritesGallery.scrollHeight,\r\n        behavior: 'smooth',\r\n      });\r\n    }\r\n  \r\n\r\n// Remove an exersise from an array stored in local storage\r\n\r\nasync function removeObjectFromLocalStorage(idToRemove) {\r\n  try {\r\n    const itemsFromLS = await JSON.parse(localStorage.getItem(LS_KEY_FAVORITES));\r\n\r\n        if (!Array.isArray(itemsFromLS) || itemsFromLS.length === 0) {\r\n          console.log('Array in local storage is empty or does not exist.');\r\n          return;\r\n        }\r\n    \r\n        itemsFromLS = itemsFromLS.filter(item => item._id !== idToRemove);\r\n       \r\n        localStorage.setItem(LS_KEY_FAVORITES, JSON.stringify(itemsFromLS));\r\n        console.log(`Object with ID ${idToRemove} removed from local storage.`);\r\n        \r\n        refs.onRemoveBtn.removeEventListener('click', removeObjectFromLocalStorage);      \r\n             \r\n        await refreshGallery();\r\n    \r\n    storedArray = storedArray.filter(item => item._id !== idToRemove);\r\n    localStorage.setItem(LS_KEY_FAVORITES, JSON.stringify(storedArray));\r\n    console.log(`Object with ID ${idToRemove} removed from local storage.`);\r\n    await refreshGallery();\r\n  } catch (error) {\r\n    console.error('Error removing object from local storage:', error);\r\n  }\r\n}\r\n\r\n// Add to Favorites after click on button 'Add to Favotites' at Modal\r\n\r\n//  refs.addToFavoritesBtn.addEventListener('click', addItemToFavorites);\r\n\r\n//   async function addItemToFavorites(event) {\r\n//     event.preventDefault();\r\n\r\n//     const element = event.target.closest(\".ex-add-btn\");\r\n//     const elementId = element.dataset.id;\r\n//       try {\r\n//         const exercise = await searchExerciseByID(elementId);\r\n//         let favorites = JSON.parse(localStorage.getItem(LS_KEY_FAVORITES)) || [];\r\n//         const isDuplicate = favorites.some(favorite => favorite._id === exercise._id);\r\n\r\n//         if (!isDuplicate) {\r\n//            favorites.push(exercise);\r\n//            localStorage.setItem(LS_KEY_FAVORITES, JSON.stringify(favorites));\r\n//            await refreshGallery();\r\n//            console.log(\"Exercise added to favorites:\", exercise);\r\n//         } else {\r\n//            console.log(\"Exercise is already in favorites.\");\r\n//         }\r\n//     } catch (error) {\r\n//       console.error(\"Error adding exercise to favorites:\", error);\r\n//       apiIsiToastError();\r\n//     }\r\n// }\r\n\r\n\r\n\r\n// After click  \"Start\" arrow\r\nfunction handleStartButtonClick(event) {\r\n  event.preventDefault();\r\n  // Open the modal\r\n  // onClickCardContent();\r\n        \r\n  refs.onStartBtn.removeEventListener('click', handleStartButtonClick);\r\n}\r\n\r\n// function createMarkupFavorites({ _id, bodyPart, name, target, burnedCalories, time }) {\r\n//       let isAdded = false;\r\n//       const favorites = localStorage.getItem(LS_KEY_FAVORITES);\r\n\r\n//       if (favorites) {\r\n//         const favoritesFromLS = JSON.parse(favorites);\r\n//         isAdded = favoritesFromLS.some(item => item._id === _id);\r\n//       }\r\n//       return `\r\n//         <li class=\"favorites-gallery-item\">\r\n//             <span class=\"workout\">workout</span>\r\n//             <a class=\"favorites-remove\" href=\"#\">\r\n//                 <button class=\"favorites-remove-btn\" type=\"button\">\r\n//                     <img class=\"favorites-remove-icon\" src=\"../img/icons/symbole-defs.svg#icon-basket\" alt=\"icon-basket\"/>\r\n//                 </button>\r\n//             </a>\r\n//             <a class=\"favorites-start\" href=\"#\">\r\n//                 <button class=\"favorites-start-btn\" type=\"button\">Start\r\n//                     <img class=\"favorites-start-icon\" src=\"../img/icons/symbole-defs.svg#icon-line\" alt=\"start-icon\"/>\r\n//                 </button>\r\n//             </a>\r\n//             <img class=\"favorites-man-icon\" src=\"../img/icons/symbol-defs.svg#icon-Man\" alt=\"man-icon\"/>\r\n//             <h3 class=\"favorites-item-title\">${name}</h3>\r\n//             <ul class=\"favorites-gallery-info\">\r\n//                 <li class=\"favorites-gallery-info-item\">Burned calories: <span class=\"descr-span\">${burnedCalories} / ${time} min</span></li>\r\n//                 <li class=\"favorites-gallery-info-item\">Body part: <span class=\"descr-span\">${bodyPart}</span></li>\r\n//                 <li class=\"favorites-gallery-info-item\">Target: <span class=\"descr-span\">${target}</span></li>\r\n//             </ul>\r\n//         </li>`;\r\n//     }\r\n\r\nfunction createMarkupFavorites(data) {\r\n  const markup = data.map(\r\n    ({ _id, bodyPart, name, target, burnedCalories, time }) => `\r\n        <li class=\"favorites-gallery-item\" data-id=\"${_id}\" id=\"card-${_id}\">\r\n           <div class=\"favorites-item\">\r\n              <div class=\"favorites-item-wrapper\">\r\n                <span class=\"workout\">WORKOUT</span>\r\n                <button class=\"favorites-remove-btn\">\r\n                  <svg class=\"favorites-remove-icon\" width=\"12\" height=\"13\">\r\n                    <use href=\"../img/icons/symbole-defs.svg#icon-basket\"></use>\r\n                  </svg>\r\n                </button>\r\n                <a class=\"favorites-start\" href=\"\" data-id=\"${_id}\">\r\n                  <span>Start</span>\r\n                  <svg class=\"favorites-start-icon\" width=\"14\" height=\"14\">\r\n                    <use href=\"../img/icons/symbole-defs.svg#icon-line\"></use>\r\n                  </svg>\r\n                </a>\r\n              </div>\r\n              <div class=\"favorites-item-info\">\r\n                <div class=\"favorites-man-icon\">\r\n                  <svg class=\"icon-Man\" width=\"14\" height=\"14\">\r\n                    <use href=\"../img/icons/symbol-defs.svg#icon-Man\"\"></use>\r\n                  </svg>\r\n                  <h3 class=\"favorites-item-title\">${name.charAt(0).toUpperCase() + name.slice(1)}</h3>\r\n                </div>\r\n              </div>\r\n              <div class=\"favorites-item-info-wrapper\">\r\n                <ul class=\"favorites-gallery-info\">\r\n                  <li class=\"favorites-gallery-info-item\">Burned calories: <span class=\"descr-span\">${burnedCalories} / ${time} min</span></li>\r\n                  <li class=\"favorites-gallery-info-item\">Body part: <span class=\"descr-span\">${bodyPart.charAt(0).toUpperCase() + bodyPart.slice(1)}</span></li>\r\n                  <li class=\"favorites-gallery-info-item\">Target: <span class=\"descr-span\">${target.charAt(0).toUpperCase() + target.slice(1)}</span></li>\r\n                </ul>\r\n              </div>\r\n           </div>\r\n        </li>`)\r\n    .join('');\r\n  }\r\n\r\n\r\n  \r\n"],"names":["LS_KEY_QUOTE","quoteFromLS"],"mappings":"2BAOA,MAAMA,EAAe,gBACfC,EAAc,KAAK,MAAM,aAAa,QAAQD,CAAY,CAAC,EACjE,QAAQ,IAAIC,CAAW"}