{"version":3,"file":"favorites-a01bde11.js","sources":["../../src/js/favorites.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nimport { hide, show } from './services/visibility';\r\n// import { refs } from './templates/refs.js';\r\n\r\n// //  Quote of Day if it is not part of favorites\r\n\r\nconst LS_KEY_QUOTE = 'quoteResponse';\r\nconst quoteFromLS = JSON.parse(localStorage.getItem(LS_KEY_QUOTE));\r\n// console.log(quoteFromLS);\r\n\r\nfunction displayQuoteOnPage(quoteData) {\r\n  const quoteText = document.querySelector('.quote-text');\r\n  const quoteAuthor = document.querySelector('.quote-author');\r\n  quoteText.textContent = quoteData.quote;\r\n  quoteAuthor.textContent = quoteData.author;\r\n}\r\n\r\n/// Create Favorites page\r\n\r\n// const LS_KEY_FAVORITES = 'exerciseFavorites';\r\n\r\nasync function createGalleryFromLS(LS_KEY_FAVORITES, createMarkupFavorites) {\r\n  try {\r\n    const itemsFromLS = JSON.parse(localStorage.getItem('exersiseFavorites'));\r\n    console.log(itemsFromLS);\r\n\r\n    if (\r\n      !itemsFromLS ||\r\n      !Array.isArray(itemsFromLS) ||\r\n      itemsFromLS.length === 0\r\n    ) {\r\n      console.log('No items found in local storage or data is invalid.');\r\n\r\n      return;\r\n    }\r\n\r\n    refs.favoritesGallery.innerHTML = '';\r\n    refs.favoritesGallery.appendChild(refs.galleryItem);\r\n  } catch (error) {\r\n    console.error('Error creating gallery from local storage:', error);\r\n  } finally {\r\n    console.log();\r\n    refreshGallery();\r\n  }\r\n}\r\n\r\n// Refresh the gallery by updating the displayed items\r\nasync function refreshGallery() {\r\n  try {\r\n    const itemsFromLS = JSON.parse(localStorage.getItem('exersiseFavorites'));\r\n    console.log(itemsFromLS);\r\n\r\n    if (!Array.isArray(itemsFromLS) || itemsFromLS.length === 0) {\r\n      console.log('Array in local storage is empty or does not exist.');\r\n\r\n      return;\r\n    }\r\n\r\n    refs.favoritesGallery.innerHTML = '';\r\n\r\n    itemsFromLS.forEach(item => {\r\n      const markup = createMarkupFavorites(item);\r\n\r\n      refs.favoritesGallery.insertAdjacentHTML('afterbegin', markup);\r\n    });\r\n\r\n    console.log('Gallery refreshed successfully.');\r\n  } catch (error) {\r\n    console.error('Error refreshing gallery:', error);\r\n  }\r\n}\r\n\r\n// Remove an exersise from an array stored in local storage\r\n\r\n// refs.onRemoveBtn.addEventListener('click', removeObjectFromLocalStorage);\r\n\r\nasync function removeObjectFromLocalStorage(idToRemove) {\r\n  try {\r\n    let itemsFromLS = JSON.parse(localStorage.getItem('exersiseFavorites'));\r\n\r\n    if (!Array.isArray(itemsFromLS) || itemsFromLS.length === 0) {\r\n      console.log('Array in local storage is empty or does not exist.');\r\n      return;\r\n    }\r\n    itemsFromLS = itemsFromLS.filter(item => item._id !== idToRemove);\r\n    localStorage.setItem('exersiseFavorites', JSON.stringify(itemsFromLS));\r\n    console.log(`Object with ID ${idToRemove} removed from local storage.`);\r\n    await refreshGallery();\r\n  } catch (error) {\r\n    console.error('Error removing object from local storage:', error);\r\n  }\r\n}\r\n\r\n// refs.onStartBtn.addEventListener('click', handleStartButtonClick)\r\n\r\nfunction handleStartButtonClick(evt) {\r\n  if (!evt.target.dataset.id) {\r\n    return;\r\n  }\r\n  showLoader(refs.loaderModal);\r\n  const exerciseId = evt.target.dataset.id;\r\n  hide(refs.favoritesGallery);\r\n  createModalMenu(exerciseId);\r\n}\r\n\r\n// Creating a plug when the LS is empty\r\n\r\nconst markupMessageBlock = `<div class=\"favorites-message-block\">\r\n     <div class=\"plug-icon\">\r\n       <img class=\"favorites-box-img\" src=\"./img/icons/dumbbell.png\"\r\nalt=\"dumbbell\" />\r\n     </div >\r\n     <div class=\"favorites-box-paragraf\">\r\n         It appears that you have not added any exercises to your\r\nfavorites yet.To get started, you can add exercises that you like to\r\nyour favorites for easier access in the future.\r\n     </div>\r\n   </div>`;\r\n\r\nfunction showMessageBlock() {\r\n  refs.messageBlock.innerHTML = markupMessageBlock;\r\n}\r\n\r\nfunction createMarkupFavorites(itemsFromLS) {\r\n  markupArray.innerHTML = itemsFromLS\r\n    .map(({ _id, bodyPart, name, target, burnedCalories, time }) => {\r\n      return `\r\n       <li class=\"favorites-gallery-item\" data-id=\"${_id}\" id=\"card-${_id}\">\r\n          <div class=\"favorites-item\">\r\n             <div class=\"favorites-item-wrapper\">\r\n               <span class=\"workout\">Workout</span>\r\n               <button type=\"button\" data-id=${_id}\r\ndata-favorites-remove class=\"favorites-remove-btn\"></button>\r\n                 <svg class=\"favorites-remove-icon\" width=\"12\" height=\"13\">\r\n                   <use href=\"./img/icons/symbol-defs.svg#icon-basket\"></use>\r\n                 </svg>\r\n               </button>\r\n               <button class=\"favorites-start\" type=\"submit\"\r\ndata-id=\"${_id} data-modal-open>\r\n                 <span>Start</span>\r\n                 <svg class=\"favorites-start-icon\" width=\"14\" height=\"14\">\r\n                   <use\r\nhref=\"./img/icons/symbol-defs.svg#icon-arrow-top-right\"></use>\r\n                 </svg>\r\n               </button>\r\n             </div>\r\n             <div class=\"favorites-item-info\">\r\n               <div class=\"favorites-man-icon\">\r\n                 <svg class=\"icon-Man\" width=\"14\" height=\"14\">\r\n                   <use href=\"./img/icons/symbol-defs.svg#icon-Man\"\"></use>\r\n                 </svg>\r\n                 <h3\r\nclass=\"favorites-item-title\">${\r\n        name.charAt(0).toUpperCase() + name.slice(1)\r\n      }</h3>\r\n               </div>\r\n             </div>\r\n             <div class=\"favorites-item-info-wrapper\">\r\n               <ul class=\"favorites-gallery-info\">\r\n                 <li class=\"favorites-gallery-info-item\">Burned\r\ncalories: <span class=\"favorites-item-value\">${burnedCalories} /\r\n${time} min</span></li>\r\n                 <li class=\"favorites-gallery-info-item\">Body part:\r\n<span class=\"favorites-item-value\">${\r\n        bodyPart.charAt(0).toUpperCase() + bodyPart.slice(1)\r\n      }</span></li>\r\n                 <li class=\"favorites-gallery-info-item\">Target:\r\n<span class=\"favorites-item-value\">${\r\n        target.charAt(0).toUpperCase() + target.slice(1)\r\n      }</span></li>\r\n               </ul>\r\n             </div>\r\n          </div>\r\n       </li>`;\r\n    })\r\n    .join('');\r\n  refs.messageBlock.innerHTML = '';\r\n  refs.messageBlock.prepend(markupArray);\r\n}\r\n\r\n//  Scroll for favorites-gallery\r\n\r\nfunction showScroll() {\r\n  const scrollElement = document.getElementById('.favorites-gallery');\r\n  element.scrollIntoView({\r\n    behavior: 'smooth',\r\n    block: 'start',\r\n    inline: 'start',\r\n  });\r\n  if (storedArray.length > 8)\r\n    refs.favoritesGallery.scrollTo({\r\n      top: refs.favoritesGallery.scrollHeight,\r\n      behavior: 'smooth',\r\n    });\r\n}\r\nfunction hideScroll() {\r\n  favoritesGallery.classList.remove('scroll-on');\r\n  favoritesGallery.classList.remove('favorites-scroll');\r\n  document\r\n    .querySelector('.favorites-gallery')\r\n    .classList.remove('favorites-scroll');\r\n}\r\n\r\n// import axios from 'axios';\r\n// import { refs } from './templates/refs.js';\r\n// // import { handleClickOnCardStart } from './exercises-details.js';\r\n// // import { onClickCardContent } from './modal-menu.js';\r\n\r\n// // Getting items from the LS\r\n// const LS_KEY_FAVORITES = 'favorites';\r\n// const itemsFromLS = JSON.parse(localStorage.getItem(LS_KEY_FAVORITES));\r\n\r\n// // Creating a plug when the LS is empty\r\n// const markupMessageBlock =\r\n//   '<div class=\"favorites-message-block\"></div> <div class=\"plug-icon\"><img class=\"favorites-box-img\" src=\"./img/icons/dumbbell.png\" alt=\"dumbbell\"/></div><div class=\"favorites-box-paragraf\"></div>It appears that you have not added any exercises to your  favorites yet. To get started, you can add exercises that you like to your favorites for easier access in the future.</div></div>';\r\n\r\n// function showMessageBlock() {\r\n//   refs.messageBlock.innerHTML = markupMessageBlock;\r\n// }\r\n\r\n// const test = document.querySelector('.favorites-btn');\r\n\r\n// test.addEventListener('click', handleClickOnCardStart);\r\n// console.log(test);\r\n// console.log(handleClickOnCardStart());\r\n\r\n// // Creating gallery of favorite exersises\r\n\r\n// if (!itemsFromLS) {\r\n//   showMessageBlock();\r\n\r\n// } else if (!itemsFromLS || !Array.isArray(itemsFromLS) || itemsFromLS.length === 0) {\r\n//   showMessageBlock();\r\n//   console.log('No items found in local storage or data is invalid.');\r\n\r\n// } else if (itemsFromLS.length > 0) {\r\n//   createGalleryFromLS(itemsFromLS);\r\n\r\n//   refs.onRemoveBtn.forEach(button => {button.addEventListener('click', removeFromLS)});\r\n//   //  chooseButtonForModal();\r\n//   // addRemoveScroll();\r\n// }\r\n\r\n// function createMarkupFavorites(data) {\r\n//   markupArray.innerHTML = data\r\n//     .map(\r\n//       ({ _id, bodyPart, name, target, burnedCalories, time }) => {\r\n//         return `\r\n//         <li class=\"favorites-gallery-item\" data-id=\"${_id}\" id=\"card-${_id}\">\r\n//            <div class=\"favorites-item\">\r\n//               <div class=\"favorites-item-wrapper\">\r\n//                 <span class=\"workout\">WORKOUT</span>\r\n//                 <button type=\"button\" data-id=${_id} data-favorites-remove class=\"favorites-remove-btn\"></button>\r\n//                   <svg class=\"favorites-remove-icon\" width=\"12\" height=\"13\">\r\n//                     <use href=\"../img/icons/symbole-defs.svg#icon-basket\"></use>\r\n//                   </svg>\r\n//                 </button>\r\n//                 <a href=\"/src/partials/modal-menu.html\" class=\"favorites-start\" data-id=\"${_id} data-modal-open\"></a>\r\n//                   <span>Start</span>\r\n//                   <svg class=\"favorites-start-icon\" width=\"14\" height=\"14\">\r\n//                     <use href=\"../img/icons/symbole-defs.svg#icon-line\"></use>\r\n//                   </svg>\r\n//                 </a>\r\n//               </div>\r\n//               <div class=\"favorites-item-info\">\r\n//                 <div class=\"favorites-man-icon\">\r\n//                   <svg class=\"icon-Man\" width=\"14\" height=\"14\">\r\n//                     <use href=\"../img/icons/symbol-defs.svg#icon-Man\"\"></use>\r\n//                   </svg>\r\n//                   <h3 class=\"favorites-item-title\">${name.charAt(0).toUpperCase() + name.slice(1)}</h3>\r\n//                 </div>\r\n//               </div>\r\n//               <div class=\"favorites-item-info-wrapper\">\r\n//                 <ul class=\"favorites-gallery-info\">\r\n//                   <li class=\"favorites-gallery-info-item\">Burned calories: <span class=\"favorites-item-value\">${burnedCalories} / ${time} min</span></li>\r\n//                   <li class=\"favorites-gallery-info-item\">Body part: <span class=\"favorites-item-value\">${bodyPart.charAt(0).toUpperCase() + bodyPart.slice(1)}</span></li>\r\n//                   <li class=\"favorites-gallery-info-item\">Target: <span class=\"favorites-item-value\">${target.charAt(0).toUpperCase() + target.slice(1)}</span></li>\r\n//                 </ul>\r\n//               </div>\r\n//            </div>\r\n//         </li>`})\r\n//     .join('');\r\n//   refs.messageBlock.innerHTML = '';\r\n//   refs.messageBlock.prepend(markupArray);\r\n// }\r\n\r\n// // Removing an exersise from the array stored in LS\r\n\r\n// async function removeObjectFromLocalStorage(idToRemove) {\r\n//   try {\r\n//     const itemsFromLS = await JSON.parse(localStorage.getItem(LS_KEY_FAVORITES));\r\n\r\n//         if (!Array.isArray(itemsFromLS) || itemsFromLS.length === 0) {\r\n//           console.log('Array in local storage is empty or does not exist.');\r\n//           return;\r\n//         }\r\n\r\n//         itemsFromLS = itemsFromLS.filter(item => item._id !== idToRemove);\r\n\r\n//         localStorage.setItem(LS_KEY_FAVORITES, JSON.stringify(itemsFromLS));\r\n//         console.log(`Object with ID ${idToRemove} removed from local storage.`);\r\n\r\n//         refs.onRemoveBtn.removeEventListener('click', removeObjectFromLocalStorage);\r\n\r\n//         await refreshGallery();\r\n\r\n//     storedArray = storedArray.filter(item => item._id !== idToRemove);\r\n//     localStorage.setItem(LS_KEY_FAVORITES, JSON.stringify(storedArray));\r\n//     console.log(`Object with ID ${idToRemove} removed from local storage.`);\r\n//     await refreshGallery();\r\n//   } catch (error) {\r\n//     console.error('Error removing object from local storage:', error);\r\n//   }\r\n// }\r\n\r\n// // Scroll an element into view\r\n// // function showScroll() {\r\n// // const scrollElement = document.getElementById('targetElementId');\r\n// // element.scrollIntoView({\r\n// //   behavior: 'smooth', // Optional: 'auto' or 'smooth'\r\n// //   block: 'start',     // Optional: 'start', 'center', 'end', or 'nearest'\r\n// //   inline: 'start'     // Optional: 'start', 'center', 'end', or 'nearest'\r\n// // });\r\n// //   if ()\r\n// //     refs.favoritesGallery.scrollTo({\r\n// //       top: refs.favoritesGallery.scrollHeight,\r\n// //       behavior: 'smooth',\r\n// //     }\r\n// // }\r\n// // function hideScrollForFavorites() {\r\n// //   favoritesGallery.classList.remove('scroll-on');\r\n// //   favoritesGallery.classList.remove('padding-for-scroll-list');\r\n// //   document\r\n// //     .querySelector('.favor-wrapper')\r\n// //     .classList.remove('padding-for-scroll-container');\r\n// // }\r\n\r\n// /// Create the Favorites page\r\n\r\n// async function createGalleryFromLS(event) {\r\n//   event.preventDefault();\r\n\r\n//   refs.favoritesGallery.innerHTML = '';\r\n//   refs.favoritesMessage.style.display = 'none';\r\n\r\n//   try {\r\n//     const itemsFromLS = await JSON.parse(localStorage.getItem(LS_KEY_FAVORITES));\r\n\r\n//     refs.favoritesGallery.insertAdjacentHTML(\"afterbegin\", createMarkupFavorites(itemsFromLS));\r\n\r\n//     if (itemsFromLS > 9) {\r\n//       scrollBy();\r\n//     }\r\n//     refs.onRemoveBtn.forEach.addEventListener('click', removeObjectFromLocalStorage);\r\n//     refs.onStartBtn.forEach.addEventListener('click', handleStartButtonClick);\r\n\r\n//     } catch (error) {\r\n//       console.error('Error creating gallery from local storage:', error);\r\n//     } finally {\r\n//       console.log();\r\n//       await refreshGallery();\r\n//     }\r\n//   }\r\n\r\n//     // Refresh the gallery by updating the displayed items\r\n// async function refreshGallery() {\r\n//   refs.favoritesMessage.style.display = 'none';\r\n\r\n//   try {\r\n//     const itemsFromLS = await JSON.parse(localStorage.getItem(LS_KEY_FAVORITES));\r\n\r\n//     if (!Array.isArray(itemsFromLS) || itemsFromLS.length === 0) {\r\n//       console.log('Array in local storage is empty or does not exist.');\r\n//       refs.favoritesMessage.style.display = 'block';\r\n\r\n//     }\r\n\r\n//     refs.favoritesGallery.innerHTML = '';\r\n\r\n//     itemsFromLS.forEach(itemsFromLS => {\r\n//       refs.favoritesGallery.insertAdjacentHTML('afterbegin', createMarkupFavorites(itemsFromLS));\r\n\r\n//       refs.onRemoveBtn.forEach.addEventListener('click', removeObjectFromLocalStorage);\r\n//       refs.onStartBtn.forEach.addEventListener('click', handleStartButtonClick);\r\n//     });\r\n//    } catch (error) {\r\n//       console.error('Error creating gallery from local storage:', error);\r\n//     } finally {\r\n//       console.log();\r\n//       await refreshGallery();\r\n//     }\r\n// }\r\n//   //====================================\r\n// // const LS_KEY_QUOTE = 'quoteResponse';\r\n// // const quoteFromLS = JSON.parse(localStorage.getItem(LS_KEY_QUOTE));\r\n// // console.log(quoteFromLS);\r\n\r\n// // function displayQuoteOnPage(quoteData) {\r\n// //   const quoteText = document.querySelector('.quote-text');\r\n// //   const quoteAuthor = document.querySelector('.quote-author');\r\n// //   quoteText.textContent = quoteData.quote;\r\n// //   quoteAuthor.textContent = quoteData.author;\r\n// // }\r\n\r\n// // // Favorites gallery\r\n\r\n// // const BASE_URL_FAVORITES = 'https://energyflow.b.goit.study/api/exersises/';\r\n\r\n// // async function searchExerciseByID({ id}) {\r\n// //   const response = await axios.get(\r\n// //     `${BASE_URL_FAVORITES}`,\r\n// //     {\r\n// //       params: {\r\n// //         _id: id,\r\n// //       },\r\n// //     }\r\n// //   );\r\n// //   return response.data;\r\n// // }\r\n\r\n// // /// Create the Favorites page\r\n\r\n// // const LS_KEY_FAVORITES = 'favorites';\r\n\r\n// // async function createGalleryFromLS(event) {\r\n// //   event.preventDefault();\r\n\r\n// //   refs.favoritesGallery.innerHTML = '';\r\n// //   refs.favoritesMessage.style.display = 'none';\r\n\r\n// //   try {\r\n// //     const itemsFromLS = await JSON.parse(localStorage.getItem(LS_KEY_FAVORITES));\r\n// //     if (\r\n// //       !itemsFromLS ||\r\n// //       !Array.isArray(itemsFromLS) ||\r\n// //       itemsFromLS.length === 0\r\n// //     ) {\r\n// //       console.log('No items found in local storage or data is invalid.');\r\n// //       refs.favoritesMessage.style.display = 'block';\r\n// //     }\r\n\r\n// //     refs.favoritesGallery.insertAdjacentHTML(\"afterbegin\", createMarkupFavorites(itemsFromLS));\r\n\r\n// //     if (itemsFromLS > 9) {\r\n// //       scrollBy();\r\n// //     }\r\n// //     refs.onRemoveBtn.forEach.addEventListener('click', removeObjectFromLocalStorage);\r\n// //     refs.onStartBtn.forEach.addEventListener('click', handleStartButtonClick);\r\n\r\n// //     } catch (error) {\r\n// //       console.error('Error creating gallery from local storage:', error);\r\n// //     } finally {\r\n// //       console.log();\r\n// //       await refreshGallery();\r\n// //     }\r\n// //   }\r\n\r\n// //     // Refresh the gallery by updating the displayed items\r\n// //   async function refreshGallery() {\r\n// //     refs.favoritesMessage.style.display = 'none';\r\n\r\n// //       try {\r\n// //         const itemsFromLS = await JSON.parse(localStorage.getItem(LS_KEY_FAVORITES));\r\n\r\n// //         if (!Array.isArray(itemsFromLS) || itemsFromLS.length === 0) {\r\n// //           console.log('Array in local storage is empty or does not exist.');\r\n// //           refs.favoritesMessage.style.display = 'block';\r\n// //       }\r\n\r\n// //       refs.favoritesGallery.innerHTML = '';\r\n\r\n// //       itemsFromLS.forEach(itemsFromLS => {\r\n// //         refs.favoritesGallery.insertAdjacentHTML('afterbegin', createMarkupFavorites(itemsFromLS));\r\n\r\n// //         refs.onRemoveBtn.forEach.addEventListener('click', removeObjectFromLocalStorage);\r\n// //         refs.onStartBtn.forEach.addEventListener('click', handleStartButtonClick);\r\n// //       });\r\n\r\n// //       console.log('Gallery refreshed successfully.');\r\n// //     } catch (error) {\r\n// //       console.error('Error refreshing gallery:', error);\r\n// //     }\r\n// //   }\r\n\r\n// //     // Scroll for container favorites-gallery for desktop and tablet\r\n// //     function scrollBy() {\r\n// //       refs.favoritesGallery.scrollTo({\r\n// //         top: refs.favoritesGallery.scrollHeight,\r\n// //         behavior: 'smooth',\r\n// //       });\r\n// //     }\r\n\r\n// // // Remove an exersise from an array stored in local storage\r\n\r\n// // async function removeObjectFromLocalStorage(idToRemove) {\r\n// //   try {\r\n// //     const itemsFromLS = await JSON.parse(localStorage.getItem(LS_KEY_FAVORITES));\r\n\r\n// //         if (!Array.isArray(itemsFromLS) || itemsFromLS.length === 0) {\r\n// //           console.log('Array in local storage is empty or does not exist.');\r\n// //           return;\r\n// //         }\r\n\r\n// //         itemsFromLS = itemsFromLS.filter(item => item._id !== idToRemove);\r\n\r\n// //         localStorage.setItem(LS_KEY_FAVORITES, JSON.stringify(itemsFromLS));\r\n// //         console.log(`Object with ID ${idToRemove} removed from local storage.`);\r\n\r\n// //         refs.onRemoveBtn.removeEventListener('click', removeObjectFromLocalStorage);\r\n\r\n// //         await refreshGallery();\r\n\r\n// //     storedArray = storedArray.filter(item => item._id !== idToRemove);\r\n// //     localStorage.setItem(LS_KEY_FAVORITES, JSON.stringify(storedArray));\r\n// //     console.log(`Object with ID ${idToRemove} removed from local storage.`);\r\n// //     await refreshGallery();\r\n// //   } catch (error) {\r\n// //     console.error('Error removing object from local storage:', error);\r\n// //   }\r\n// // }\r\n\r\n// //===================================================================================\r\n\r\n// // Add to Favorites after click on button 'Add to Favotites' at Modal\r\n\r\n// //  refs.addToFavoritesBtn.addEventListener('click', addItemToFavorites);\r\n\r\n// //   async function addItemToFavorites(event) {\r\n// //     event.preventDefault();\r\n\r\n// //     const element = event.target.closest(\".ex-add-btn\");\r\n// //     const elementId = element.dataset.id;\r\n// //       try {\r\n// //         const exercise = await searchExerciseByID(elementId);\r\n// //         let favorites = JSON.parse(localStorage.getItem(LS_KEY_FAVORITES)) || [];\r\n// //         const isDuplicate = favorites.some(favorite => favorite._id === exercise._id);\r\n\r\n// //         if (!isDuplicate) {\r\n// //            favorites.push(exercise);\r\n// //            localStorage.setItem(LS_KEY_FAVORITES, JSON.stringify(favorites));\r\n// //            await refreshGallery();\r\n// //            console.log(\"Exercise added to favorites:\", exercise);\r\n// //         } else {\r\n// //            console.log(\"Exercise is already in favorites.\");\r\n// //         }\r\n// //     } catch (error) {\r\n// //       console.error(\"Error adding exercise to favorites:\", error);\r\n\r\n// //     }\r\n// // }\r\n\r\n// // After click  \"Start\" arrow\r\n// // function handleStartButtonClick(event) {\r\n// //   event.preventDefault();\r\n// //   // Open the modal\r\n// //   // onClickCardContent();\r\n\r\n// //   refs.onStartBtn.removeEventListener('click', handleStartButtonClick);\r\n// // }\r\n\r\n// // function createMarkupFavorites({ _id, bodyPart, name, target, burnedCalories, time }) {\r\n// //       let isAdded = false;\r\n// //       const favorites = localStorage.getItem(LS_KEY_FAVORITES);\r\n\r\n// //       if (favorites) {\r\n// //         const favoritesFromLS = JSON.parse(favorites);\r\n// //         isAdded = favoritesFromLS.some(item => item._id === _id);\r\n// //       }\r\n// //       return `\r\n// //         <li class=\"favorites-gallery-item\">\r\n// //             <span class=\"workout\">workout</span>\r\n// //             <a class=\"favorites-remove\" href=\"#\">\r\n// //                 <button class=\"favorites-remove-btn\" type=\"button\">\r\n// //                     <img class=\"favorites-remove-icon\" src=\"../img/icons/symbole-defs.svg#icon-basket\" alt=\"icon-basket\"/>\r\n// //                 </button>\r\n// //             </a>\r\n// //             <a class=\"favorites-start\" href=\"#\">\r\n// //                 <button class=\"favorites-start-btn\" type=\"button\">Start\r\n// //                     <img class=\"favorites-start-icon\" src=\"../img/icons/symbole-defs.svg#icon-line\" alt=\"start-icon\"/>\r\n// //                 </button>\r\n// //             </a>\r\n// //             <img class=\"favorites-man-icon\" src=\"../img/icons/symbol-defs.svg#icon-Man\" alt=\"man-icon\"/>\r\n// //             <h3 class=\"favorites-item-title\">${name}</h3>\r\n// //             <ul class=\"favorites-gallery-info\">\r\n// //                 <li class=\"favorites-gallery-info-item\">Burned calories: <span class=\"descr-span\">${burnedCalories} / ${time} min</span></li>\r\n// //                 <li class=\"favorites-gallery-info-item\">Body part: <span class=\"descr-span\">${bodyPart}</span></li>\r\n// //                 <li class=\"favorites-gallery-info-item\">Target: <span class=\"descr-span\">${target}</span></li>\r\n// //             </ul>\r\n// //         </li>`;\r\n// //     }\r\n\r\n// // function createMarkupFavorites(data) {\r\n// //   const markup = data.map(\r\n// //     ({ _id, bodyPart, name, target, burnedCalories, time }) => `\r\n// //         <li class=\"favorites-gallery-item\" data-id=\"${_id}\" id=\"card-${_id}\">\r\n// //            <div class=\"favorites-item\">\r\n// //               <div class=\"favorites-item-wrapper\">\r\n// //                 <span class=\"workout\">WORKOUT</span>\r\n// //                 <button class=\"favorites-remove-btn\">\r\n// //                   <svg class=\"favorites-remove-icon\" width=\"12\" height=\"13\">\r\n// //                     <use href=\"../img/icons/symbole-defs.svg#icon-basket\"></use>\r\n// //                   </svg>\r\n// //                 </button>\r\n// //                 <a class=\"favorites-start\" href=\"\" data-id=\"${_id}\">\r\n// //                   <span>Start</span>\r\n// //                   <svg class=\"favorites-start-icon\" width=\"14\" height=\"14\">\r\n// //                     <use href=\"../img/icons/symbole-defs.svg#icon-line\"></use>\r\n// //                   </svg>\r\n// //                 </a>\r\n// //               </div>\r\n// //               <div class=\"favorites-item-info\">\r\n// //                 <div class=\"favorites-man-icon\">\r\n// //                   <svg class=\"icon-Man\" width=\"14\" height=\"14\">\r\n// //                     <use href=\"../img/icons/symbol-defs.svg#icon-Man\"\"></use>\r\n// //                   </svg>\r\n//          // <h3 class=\"favorites-item-title\">${name.charAt(0).toUpperCase() + name.slice(1)}</h3>\r\n// //                 </div>\r\n// //               </div>\r\n// //               <div class=\"favorites-item-info-wrapper\">\r\n// //                 <ul class=\"favorites-gallery-info\">\r\n// //                   <li class=\"favorites-gallery-info-item\">Burned calories: <span class=\"descr-span\">${burnedCalories} / ${time} min</span></li>\r\n// //                   <li class=\"favorites-gallery-info-item\">Body part: <span class=\"descr-span\">${bodyPart.charAt(0).toUpperCase() + bodyPart.slice(1)}</span></li>\r\n// //                   <li class=\"favorites-gallery-info-item\">Target: <span class=\"descr-span\">${target.charAt(0).toUpperCase() + target.slice(1)}</span></li>\r\n// //                 </ul>\r\n// //               </div>\r\n// //            </div>\r\n// //         </li>`)\r\n// //     .join('');\r\n// //   }\r\n"],"names":["LS_KEY_QUOTE"],"mappings":"AAOA,MAAMA,EAAe,gBACD,KAAK,MAAM,aAAa,QAAQA,CAAY,CAAC"}