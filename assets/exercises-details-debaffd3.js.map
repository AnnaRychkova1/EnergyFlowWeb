{"version":3,"file":"exercises-details-debaffd3.js","sources":["../../src/js/exercises-details.js"],"sourcesContent":["// ! imports\nimport Pagination from 'tui-pagination'; \n// import 'tui-pagination/dist/tui-pagination.min.css';\nimport axios from 'axios';\nimport { hide, show, showLoader, hideLoader } from \"./services/visibility\";\nimport { refs } from './templates/refs.js';\nimport isiToast from './services/isiToast.js';\n// import { exercisesParamFilter, exercisesParamName } from '../exercises'; - wait for push\n// import { getCardInfo } from './modal-menu.js';\n\n// ! add listeners\nrefs.searchForm.addEventListener('submit', handleSearch); // спочатку відкрити, потім закрити, по днфолту в нього має бути клас хіден\n// refs.containerFilteredCards // mine div for all exept form - спочатку відкрити, потім закрити, по днфолту в нього має бути клас хіден\nrefs.resultContainer.addEventListener('click', handleClickOnCardStart)\n\n\n// ! temporarely consts\nconst exercisesParamFilter = \"bodypart\";\n// const exercisesParamFilter = \"muscles\";\n// const exercisesParamFilter = \"equipment\";\nconst exercisesParamName = 'waist';\n// const exercisesParamName = 'barbell';\n\nconst queryParams = {\n  filter: exercisesParamName,\n  keyword: '',\n  page: 1,\n  limit: 9,\n  totalItems: 0,\n};\n\nlet exerciseId;\n\n// Я взяла з мейнApi\nconst BASE_URL = 'https://energyflow.b.goit.study/api';\n\nconst ENDPOINT_FILTER = 'exercises';\n\nasync function searchExerciseByFilters({ keyword}) {\n  const response = await axios.get(\n    `${BASE_URL}/${ENDPOINT_FILTER}`,\n    {\n      params: {\n        [exercisesParamFilter]: exercisesParamName,\n        keyword: keyword, \n      },\n    }\n  );\n  return response.data;\n}\n\n// Це кінець того, що я взяла\n\n// ! work with title\n// refs.exercisesHeader.textContent = `/${exercisesParamName}`;\n\n// ! Василина викликає мою функцію renderExerciseByFilterName();\nrenderExerciseByFilterName();\nasync function renderExerciseByFilterName() {\n\n  // here need to create mine container\n\n  // ! need or not\n  // refs.resultContainer.innerHTML = ''; \n\n  show(refs.searchForm)\n  showLoader(refs.loaderModal);\n\n  if (!exercisesParamFilter || !exercisesParamName ) {\n    isiToast.noResults();\n    show(refs.textResult);\n    hideLoader(refs.loaderModal);\n    return\n  }\n\n  try {\n    const { results, totalPages } = await searchExerciseByFilters(queryParams);\n    console.log(results);\n    console.log(totalPages);\n\n    // there is almost the same as if (!exercisesParamFilter || !exercisesParamName )\n    if (!results || totalPages === 0) {\n      isiToast.noResults();\n      show(refs.textResult);\n      hideLoader(refs.loaderModal);\n      return\n    }\n\n    //! має появитися частинка заголовка, але не я, а Василина\n\n    // ! create markup for the first time or once\n\n    let markup = '';\n    for (const result of results) {\n      markup += createCardsOfExercises(result);\n    }\n    refs.resultContainer.innerHTML = markup;\n    \n    if (totalPages > 1) {\n      const total = queryParams.limit * totalPages;\n      queryParams.page += 1\n      console.log(total);\n\n      // ! Pagination start\n      createPagination(total);\n    } else {\n      isiToast.endOfSearchIsiToast();\n    }\n  \n  } catch (error) {\n    console.error('Error fetching images:', error);\n    isiToast.apiIsiToastError();\n  } finally {\n    hideLoader(refs.loaderModal);\n    hide(paginationContainer);\n    // ! I have to removeListener from another person\n  }\n}\n\n// ! Works with search button\nasync function handleSearch(event) {\n  event.preventDefault();\n  refs.resultContainer.innerHTML = '';\n\n  const formQuery = event.currentTarget;\n  queryParams.keyword = formQuery.elements.query.value.trim();\n  console.log(queryParams.keyword);\n\n  if (!queryParams.keyword) {\n    isiToast.noResults();\n    show(refs.textResult);\n    hideLoader(refs.loaderModal);\n    return\n  }\n\n  try {\n    console.log(queryParams);\n    const { results } = await searchExerciseByFilters(queryParams);\n    \n    console.log(results);\n\n    // ! create markup for the first time or once\n\n    let markupFilteredCards = '';\n    for (const result of results) {\n      markupFilteredCards += createCardsOfExercises(result);\n    }\n    refs.resultContainer.innerHTML = markupFilteredCards;\n      \n  } catch (error) {\n    console.error('Error fetching images:', error);\n    isiToast.apiIsiToastError();\n  } finally {\n    refs.searchForm.reset();\n    hide(paginationContainer);\n  }\n}\n\n// ! Create markup\n\nfunction createCardsOfExercises({ _id, rating, name, burnedCalories, time, bodyPart, target }) {\n  return `<li class=\"filtered-card-item\">\n        <div class=\"card-box-workout\">\n          <div class=\"card-box-info\">\n            <div class=\"filtered-workout\">Workout</div>\n            <div class=\"card-box-rating\">\n              <p class=\"filtered-rating\">${Math.round(rating)}</p>\n              <img class=\"filteered-star\" href=\"#\" alt=\"star\" height=\"35\"></img>\n            </div>\n          </div>\n          <button type=\"submit\" data-id=${_id} class=\"to-favorites-start\">Start</button><a/>\n        </div>\n        <div class=\"card-box-title\">\n          <img class=\"filteered-athlete\" href=\"#\" alt=\"athlete\" height=\"35\"></img>\n          <h3 class=\"filteered-title\">${name}</h3>\n        </div>\n        <ul class=\"filtered-description\">\n          <li class=\"filtered-descr-item\">\n            <p class=\"filtered-descr-title\">Burned calories: <spam class=\"filtered-descr-value\">${burnedCalories} / ${time} min</spam></p>\n          </li>\n          <li class=\"filtered-descr-item\">\n            <p class=\"filtered-descr-title\">Body part: <spam class=\"filtered-descr-value\">${bodyPart}</spam></p>\n          </li>\n          <li class=\"filtered-descr-item\">\n            <p class=\"filtered-descr-title\">Target: <spam class=\"filtered-descr-value\">${target}</spam></p>\n          </li>\n        </ul>  \n  </li>\n  `;\n}\n\n// function createCardsOfExercises(results, resultContainer) {\n//   const markup = results\n//     .map(\n//       ({ _id, rating, name, burnedCalories, time, bodyPart, target }) => `<li class=\"filtered-card-item\">\n//         <div class=\"card-box-workout\">\n//           <div class=\"card-box-info\">\n//             <div class=\"filtered-workout\">Workout</div>\n//             <div class=\"card-box-rating\">\n//               <p class=\"filtered-rating\">${Math.round(rating)}</p>\n//               <img class=\"filteered-star\" href=\"#\" alt=\"star\" height=\"35\"></img>\n//             </div>\n//           </div>\n//           <button type=\"submit\" data-id=${_id} class=\"to-favorites-start\">Start</button><a/>\n//         </div>\n//         <div class=\"card-box-title\">\n//           <img class=\"filteered-athlete\" href=\"#\" alt=\"athlete\" height=\"35\"></img>\n//           <h3 class=\"filteered-title\">${name}</h3>\n//         </div>\n//         <ul class=\"filtered-description\">\n//           <li class=\"filtered-descr-item\">\n//             <p class=\"filtered-descr-title\">Burned calories: <spam class=\"filtered-descr-value\">${burnedCalories} / ${time} min</spam></p>\n//           </li>\n//           <li class=\"filtered-descr-item\">\n//             <p class=\"filtered-descr-title\">Body part: <spam class=\"filtered-descr-value\">${bodyPart}</spam></p>\n//           </li>\n//           <li class=\"filtered-descr-item\">\n//             <p class=\"filtered-descr-title\">Target: <spam class=\"filtered-descr-value\">${target}</spam></p>\n//           </li>\n//         </ul>  \n//   </li>\n//   `\n//     )\n//     .join('');\n\n//   resultContainer.insertAdjacentHTML('beforeend', markup);\n  \n// }\n\n\n//! Pagination\nconst paginationContainer = document.getElementById('pagination-container');\nfunction createPagination(totalPages, total) {\n    \n    \n    // Перевірка на те, чи потрібно створювати пагінацію\n    if (totalPages > 1) {\n        // Створюємо новий екземпляр пагінації\n        const pagination = new Pagination(paginationContainer, {\n            totalItems: total, // Загальна кількість елементів, які будуть розділені по сторінках\n            itemsPerPage: 1, // Кількість елементів на одній сторінці\n            visiblePages: 3, // Кількість видимих сторінок в пагінації\n            page: 1, // Початкова сторінка\n            centerAlign: true, // Вирівнювання пагінації по центру\n            template: {\n                // Налаштування шаблону кнопок пагінації\n                page: '<a class=\"tui-pagination-btn\">{{page}}</a>',\n                currentPage: '<strong class=\"tui-pagination-btn tui-pagination-active\">{{page}}</strong>',\n                moveButton: '<a class=\"tui-pagination-btn tui-pagination-control\"></a>',\n                disabledMoveButton: '<a class=\"tui-pagination-btn tui-pagination-control disabled\"></a>',\n                moreButton: '<a class=\"tui-pagination-btn tui-pagination-ellipsis\" aria-label=\"More\"></a>'\n            }\n        });\n    } else {\n        // Якщо сторінка одна, пагінація не потрібна\n      paginationContainer.innerHTML = ''; // Очищуємо контейнер\n    }\n}\n\nasync function handlePagination(event) {\n    if (event.target.tagName === 'A' && event.target.classList.contains('tui-pagination-btn')) {\n        const pageNum = parseInt(event.target.textContent);\n        console.log(pageNum);\n        \n        queryParams.page = pageNum;\n\n        try {\n            const { results, totalPages } = await searchExerciseByFilters(queryParams);\n\n            if (!results || totalPages === 0) {\n                isiToast.noResults();\n                show(refs.textResult);\n                hideLoader(refs.loaderModal);\n                return;\n            }\n\n            //refs.resultContainer.innerHTML = '';\n            createCardsOfExercises(results, refs.resultContainer);\n        } catch (error) {\n            console.error('Error fetching images:', error);\n            isiToast.apiIsiToastError();\n        } finally {\n            hideLoader(refs.loaderModal);\n        }\n    }\n}\n\n\n\n\n\n    // ! Function for create modal  Створити делегування подій на лішку\n    \nfunction handleClickOnCardStart(evt) {\n      \n  console.log(evt);\n  console.log(evt.target.closest('ul').dataset.id);\n  \n//       exerciseId = evt.currentTarget.dataset.id;\n//       console.log(exerciseId);\n//   evt.preventDefault();\n// console.log('hi');\n//   console.log(evt.tarlet.dataset.id);\n  \n  // console.log(evt.target.closest('ul').dataset.exercises);\n  //     if (evt.target.closest('ul').dataset.exercises) {\n  //       getCardInfo();\n  //   }\n    \n} \n\n\n\nexport { renderExerciseByFilterName };\nexport { exerciseId };\n  \n// ! will delete in future\n// export {exercisesParamFilter, exercisesParamName }\n"],"names":["refs","handleSearch","handleClickOnCardStart","exercisesParamFilter","exercisesParamName","queryParams","exerciseId","BASE_URL","ENDPOINT_FILTER","searchExerciseByFilters","keyword","axios","renderExerciseByFilterName","show","showLoader","results","totalPages","isiToast","hideLoader","markup","result","createCardsOfExercises","total","createPagination","error","hide","paginationContainer","event","formQuery","markupFilteredCards","_id","rating","name","burnedCalories","time","bodyPart","target","Pagination","evt"],"mappings":"0NAWAA,EAAK,WAAW,iBAAiB,SAAUC,CAAY,EAEvDD,EAAK,gBAAgB,iBAAiB,QAASE,CAAsB,EAIrE,MAAMC,EAAuB,WAGvBC,EAAqB,QAGrBC,EAAc,CAClB,OAAQD,EACR,QAAS,GACT,KAAM,EACN,MAAO,EACP,WAAY,CACd,EAEG,IAACE,EAGJ,MAAMC,EAAW,sCAEXC,EAAkB,YAExB,eAAeC,EAAwB,CAAE,QAAAC,CAAO,EAAG,CAUjD,OATiB,MAAMC,EAAM,IAC3B,GAAGJ,CAAQ,IAAIC,CAAe,GAC9B,CACE,OAAQ,CACN,CAACL,CAAoB,EAAGC,EACxB,QAASM,CACV,CACF,CACL,GACkB,IAClB,CAQAE,IACA,eAAeA,GAA6B,CAO1CC,EAAKb,EAAK,UAAU,EACpBc,EAAWd,EAAK,WAAW,EAS3B,GAAI,CACF,KAAM,CAAE,QAAAe,EAAS,WAAAC,CAAU,EAAK,MAAMP,EAAwBJ,CAAW,EAKzE,GAJA,QAAQ,IAAIU,CAAO,EACnB,QAAQ,IAAIC,CAAU,EAGlB,CAACD,GAAWC,IAAe,EAAG,CAChCC,EAAS,UAAS,EAClBJ,EAAKb,EAAK,UAAU,EACpBkB,EAAWlB,EAAK,WAAW,EAC3B,MACD,CAEL;AAII,IAAImB,EAAS,GACb,UAAWC,KAAUL,EACnBI,GAAUE,EAAuBD,CAAM,EAIzC,GAFApB,EAAK,gBAAgB,UAAYmB,EAE7BH,EAAa,EAAG,CAClB,MAAMM,EAAQjB,EAAY,MAAQW,EAClCX,EAAY,MAAQ,EACpB,QAAQ,IAAIiB,CAAK,EAGjBC,EAAiBD,CAAK,CAC5B,MACML,EAAS,oBAAmB,CAG/B,OAAQO,EAAO,CACd,QAAQ,MAAM,yBAA0BA,CAAK,EAC7CP,EAAS,iBAAgB,CAC7B,QAAY,CACRC,EAAWlB,EAAK,WAAW,EAC3ByB,EAAKC,CAAmB,CAEzB,CACH,CAGA,eAAezB,EAAa0B,EAAO,CACjCA,EAAM,eAAc,EACpB3B,EAAK,gBAAgB,UAAY,GAEjC,MAAM4B,EAAYD,EAAM,cAIxB,GAHAtB,EAAY,QAAUuB,EAAU,SAAS,MAAM,MAAM,OACrD,QAAQ,IAAIvB,EAAY,OAAO,EAE3B,CAACA,EAAY,QAAS,CACxBY,EAAS,UAAS,EAClBJ,EAAKb,EAAK,UAAU,EACpBkB,EAAWlB,EAAK,WAAW,EAC3B,MACD,CAED,GAAI,CACF,QAAQ,IAAIK,CAAW,EACvB,KAAM,CAAE,QAAAU,CAAS,EAAG,MAAMN,EAAwBJ,CAAW,EAE7D,QAAQ,IAAIU,CAAO,EAInB,IAAIc,EAAsB,GAC1B,UAAWT,KAAUL,EACnBc,GAAuBR,EAAuBD,CAAM,EAEtDpB,EAAK,gBAAgB,UAAY6B,CAElC,OAAQL,EAAO,CACd,QAAQ,MAAM,yBAA0BA,CAAK,EAC7CP,EAAS,iBAAgB,CAC7B,QAAY,CACRjB,EAAK,WAAW,QAChByB,EAAKC,CAAmB,CACzB,CACH,CAIA,SAASL,EAAuB,CAAE,IAAAS,EAAK,OAAAC,EAAQ,KAAAC,EAAM,eAAAC,EAAgB,KAAAC,EAAM,SAAAC,EAAU,OAAAC,GAAU,CAC7F,MAAO;AAAA;AAAA;AAAA;AAAA;AAAA,2CAKkC,KAAK,MAAML,CAAM,CAAC;AAAA;AAAA;AAAA;AAAA,0CAInBD,CAAG;AAAA;AAAA;AAAA;AAAA,wCAILE,CAAI;AAAA;AAAA;AAAA;AAAA,kGAIsDC,CAAc,MAAMC,CAAI;AAAA;AAAA;AAAA,4FAG9BC,CAAQ;AAAA;AAAA;AAAA,yFAGXC,CAAM;AAAA;AAAA;AAAA;AAAA,GAK/F,CAyCA;AACA,MAAMV,EAAsB,SAAS,eAAe,sBAAsB,EAC1E,SAASH,EAAiBP,EAAYM,EAAO,CAIrCN,EAAa,EAEM,IAAIqB,EAAWX,EAAqB,CACnD,WAAYJ,EACZ,aAAc,EACd,aAAc,EACd,KAAM,EACN,YAAa,GACb,SAAU,CAEN,KAAM,6CACN,YAAa,6EACb,WAAY,4DACZ,mBAAoB,qEACpB,WAAY,8EACf,CACb,CAAS,EAGHI,EAAoB,UAAY,EAEtC,CAoCA,SAASxB,EAAuBoC,EAAK,CAEnC,QAAQ,IAAIA,CAAG,EACf,QAAQ,IAAIA,EAAI,OAAO,QAAQ,IAAI,EAAE,QAAQ,EAAE,CAajD"}